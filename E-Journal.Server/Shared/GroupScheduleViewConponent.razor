@inject IJournalRepository journalRepository

<h2>Группа - @Group.Name</h2>
<h3>@GetWeekScheduleDateRange()</h3>
    

@if (!Group.Schedules.Any())
{
    <p><em>Расписание отсутствует</em></p>
}
else 
{
    <table class="table">
        <thead>
            <tr>
                @foreach (var date in dates)
                {
                    <th colspan="2">@DateToString(date)</th>
                }
            </tr>
        </thead>
        <tbody>
            <!--
                цикл смещающийся по строкам таблицы
                итератор i определяет номер занятия
            -->
            @for (int i = 1; i <= maxLessonsCount; i++)
            {
                <tr>
                    <!--
                        цикл смещающийся по дням недели - столбцам таблицы
                    -->
                    @for (int j = 0; j < dates.Length; j++)
                    {
                        schedule = Group.Schedules.FirstOrDefault(s => s.Date == dates[j]);

                        if (schedule == null) continue;

                        lessons = schedule.Lessons.Where(l => l.Number == i).ToArray();

                        if (lessons.Length == 0)
                        {
                            <td></td>
                            <td></td>
                        }
                        else if (lessons.Length == 1)
                        {
                            <td>
                                @journalRepository.Disciplines.First(d => d.Id == lessons[0].DisciplineId).Name
                                <br />
                                @journalRepository.Teachers.First(t => t.Id == lessons[0].TeacherId).Name
                            </td>
                            <td>@lessons[0].Room</td>
                        }
                        else
                        {
                            <td>
                                @foreach (var l in lessons)
                                {
                                    @($"{l.Subgroup}. {journalRepository.Disciplines.First(d => d.Id == l.DisciplineId).Name}")
                                    <br />
                                    @journalRepository.Teachers.First(t => t.Id == l.TeacherId).Name
                                    <br />
                                }
                            </td>
                            <td>
                                @foreach (var l in lessons)
                                {
                                    @($"{l.Subgroup}. {l.Room}")
                                    <br />
                                }
                            </td>
                        }
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Schedule? schedule;
    private Lesson[] lessons;
    private DateTime[]? dates;
    private int maxLessonsCount;

    [Parameter]
    public Group Group { get; set; }

    protected override void OnParametersSet() {
        dates = GetWeekDates();
        
        if (Group.Schedules.Any())
        {
            maxLessonsCount = GetMaxLessonsCount();
        }
    }

    private string DateToString(DateTime date){
        string str = date.ToString("dddd");
        return str[0].ToString().ToUpper() + str[1..] + ", " + date.ToShortDateString();
    }

    private string GetWeekScheduleDateRange() {
        return dates.First().ToString("dd.MM.yyyy") + " - " + dates.Last().ToString("dd.MM.yyyy");
    }

    private DateTime[] GetWeekDates() {
        DateTime minDate = Group.Schedules.FirstOrDefault()?.Date ?? DateTime.Now;
        DateTime weekStartDate = minDate.AddDays((int)minDate.DayOfWeek * -1 + 1);
        DateTime[] weekDates = new DateTime[6];

        weekDates[0] = weekStartDate;

        for (int i = 1; i < weekDates.Length; i++)
        {
            weekDates[i] = weekDates[i - 1].AddDays(1);
        }

        return weekDates;
    }

    private int GetMaxLessonsCount() {
        return Group?.Schedules.DefaultIfEmpty().Select(s => s?.Lessons.DefaultIfEmpty().Max(l => l?.Number))?.Max() ?? 0;
    }
}
