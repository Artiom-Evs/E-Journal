@page "/schedules"
@inject IJournalRepository repository

<PageTitle>E-Journal - Расписание групп</PageTitle>

<h1>Расписание групп</h1>
<br />

@if (groupsWithWeekSchedules == null)
{
    <p><em>Loading...</em></p>
}
else
{
    foreach (var group in groupsWithWeekSchedules)
    {
        <GroupScheduleViewConponent Group = "@group" />
        <br />
    }
}

@code {
    private Group[] groupsWithWeekSchedules;

    protected override void OnInitialized()
    {
        groupsWithWeekSchedules = GetGroupsWithWeekSchedules();
        StateHasChanged();
    }

    private void SetScheduleLessons(Schedule schedule)
    {
        schedule.Lessons = repository.Lessons.Where(l => l.ScheduleId == schedule.Id).ToList();
    }

    private DateTime GetStartWeekDay(DateTime date)
    {
        return date.Date.AddDays((int)DateTime.Now.DayOfWeek * -1 + 1);
    }

    private void SetWeekSchedules(Group group)
    {
        DateTime currentWeekStartDate = GetStartWeekDay(DateTime.Now);

        var hasActual = repository.Schedules.FirstOrDefault(s => s.GroupId == group.Id && s.Date >= currentWeekStartDate)?.Id > 0;

        if (hasActual)
        {
            var actualSchedules = repository.Schedules
                .Where(s => s.GroupId == group.Id)
                .Where(s => s.Date >= currentWeekStartDate)
                .OrderBy(s => s.Date);
            var lastWeekStartDate = GetStartWeekDay(actualSchedules.Last().Date);
            group.Schedules = actualSchedules.Where(s => s.Date >= lastWeekStartDate).DefaultIfEmpty().ToList();
            group.Schedules.ToList().ForEach(s => SetScheduleLessons(s));
        }
    }

    private Group[] GetGroupsWithWeekSchedules()
    {
        var groups = repository.Groups.ToList();
        groups.ForEach(g => SetWeekSchedules(g));
        return groups.ToArray();
    }
}
